
#ifndef def_token
#  define def_token(K)
#endif

#ifndef def_puncop
#  define def_puncop(K, S) def_token(K)
#endif

#ifndef def_keyword
#  define def_keyword(K, S) def_token(K)
#endif

def_token(EndOfFile)
def_token(Invalid)
def_token(Unknown)
def_token(Space)
def_token(Newline)
def_token(BlockComment)
def_token(LineComment)
def_token(ParComment)
def_token(Indent)
def_token(Dedent)
def_token(Separator)

def_puncop(LeftParen, "(")
def_puncop(RightParen, ")")
def_puncop(LeftBracket, "[")
def_puncop(RightBracket, "]")
def_puncop(LeftBrace, "{")
def_puncop(RightBrace, "}")
def_puncop(SingleQuote, "'")
def_puncop(DoubleQuote, "\"")
def_puncop(Question, "?")
def_puncop(Hash, "#")
def_puncop(Plus, "+")
def_puncop(Minus, "-")
def_puncop(Star, "*")
def_puncop(Slash, "/")
def_puncop(Percent, "%")
def_puncop(Ampersand, "&")
def_puncop(Bar, "|")
def_puncop(Caret, "^")
def_puncop(Tilde, "~")
def_puncop(Bang, "!")
def_puncop(Less, "<")
def_puncop(LessLess, "<<")
def_puncop(Greater, ">")
def_puncop(GreaterGreater, ">>")
def_puncop(Equal, "=")
def_puncop(Dot, ".")
def_puncop(Colon, ":")
def_puncop(Semicolon, ";")
def_puncop(Comma, ",")
def_puncop(At, "@")

def_puncop(EqualEqual, "==")
def_puncop(BangEqual, "!=")
def_puncop(LessEqual, "<=")
def_puncop(GreaterEqual, ">=")
def_puncop(LessGreater, "<>")
def_puncop(AmpersandAmpersand, "&&")
def_puncop(BarBar, "||")
def_puncop(ColonEqual, ":=")
def_puncop(PlusEqual, "+=")
def_puncop(MinusEqual, "-=")
def_puncop(StarEqual, "*=")
def_puncop(SlashEqual, "/=")
def_puncop(PercentEqual, "%=")
def_puncop(MinusGreater, "->")
def_puncop(EqualGreater, "=>")
def_puncop(DotDot, "..")
def_puncop(CaretEqual, "^=")
def_puncop(BarEqual, "|=")
def_puncop(AmpersandEqual, "&=")
def_puncop(LessLessEqual, "<<=")
def_puncop(GreaterGreaterEqual, ">>=")

def_puncop(Ellipsis, "...")
def_puncop(DotCaret, ".^")

def_keyword(Void, "void")
def_keyword(Bool, "bool")
def_keyword(CChar, "cchar")
def_keyword(Char, "char")
def_keyword(Char8, "char8")
def_keyword(Char16, "char16")
def_keyword(Char32, "char32")
def_keyword(Int, "int")
def_keyword(Int8, "int8")
def_keyword(Int16, "int16")
def_keyword(Int32, "int32")
def_keyword(Int64, "int64")
def_keyword(Int128, "int128")
def_keyword(Uint, "uint")
def_keyword(Uint8, "uint8")
def_keyword(Uint16, "uint16")
def_keyword(Uint32, "uint32")
def_keyword(Uint64, "uint64")
def_keyword(Uint128, "uint128")
def_keyword(Float, "float")
def_keyword(Float16, "float16")
def_keyword(Float32, "float32")
def_keyword(Float64, "float64")
def_keyword(Float128, "float128")
def_keyword(Double, "double")
def_keyword(Type, "type")
def_keyword(Class, "class")
def_keyword(Enum, "enum")
def_keyword(Union, "union")
def_keyword(Catch, "catch")
def_keyword(Throw, "throw")
def_keyword(StaticCast, "static_cast")
def_keyword(DynamicCast, "dynamic_cast")
def_keyword(ReinterpretCast, "reinterpret_cast")
def_keyword(ConstCast, "const_cast")
def_keyword(ConstExpr, "constexpr")
def_keyword(AlignOf, "alignof")
def_keyword(SizeOf, "sizeof")
def_keyword(NoExcept, "noexcept")
def_keyword(DeclType, "decltype")
def_keyword(Typeid, "typeid")
def_keyword(Args, "args")
def_keyword(Using, "using")
def_keyword(Namespace, "namespace")
def_keyword(True, "true")
def_keyword(False, "false")
def_keyword(Null, "null")
def_keyword(NullT, "null_t")
def_keyword(New, "new")
def_keyword(Default, "default")
def_keyword(Delete, "delete")
def_keyword(This, "this")
def_keyword(TypeId, "typeid")
def_keyword(Continue, "continue")
def_keyword(Break, "break")
def_keyword(Const, "const")
def_keyword(Ref, "ref")
def_keyword(RValueRef, "rref")
def_keyword(Of, "of")
def_keyword(VaList, "__builtin_va_list")
def_keyword(VaStart, "__builtin_va_start")
def_keyword(VaEnd, "__builtin_va_end")
def_keyword(VaCopy, "__builtin_va_copy")
def_keyword(VaArg, "__builtin_va_arg")
// This is the last keyword token, define any others above this:
def_keyword(Anonymous, "_")

def_token(TryBlock)
def_token(Identifier)
def_token(BinaryInteger)
def_token(DecimalInteger)
def_token(HexadecimalInteger)
def_token(DecimalFloat)
def_token(HexadecimalFloat)
def_token(DecimalExponent)
def_token(Character)
def_token(HexadecimalCharacter)
def_token(UnicodeCharacter)
def_token(String)
def_token(ArrayDelete)
def_token(SizeOfPack)

// ... operator indicating tokens
// def_puncop(Ellipsis, "...") this is used when we are NOT within a fold expression.
def_token(UnaryRightFold)
def_token(UnaryLeftFold)
// this needs to be determined during elaboration
def_token(BinaryFold)

#undef def_keyword
#undef def_puncop
#undef def_token